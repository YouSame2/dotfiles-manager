# this file contains all aliases that should work on both MacOS and Windows
# for Windows only alias -> add to .bashrc
# for MacOS only alias -> add to .zshrc

###################
# aliases
###################

# Changing "ls" to "eza"
# üëáüèΩ defaults for all eza/ls commands
alias ls='eza --color=always --icons=always --group-directories-first --hyperlink --ignore-glob="ntuser.*|NTUSER.*"'
alias la='eza -a --color=always --icons=always --group-directories-first --hyperlink --time-style=iso --ignore-glob="ntuser.*|NTUSER.*"'
alias ll='eza -lh --color=always --icons=always --group-directories-first --hyperlink --time-style=iso --ignore-glob="ntuser.*|NTUSER.*"'
alias lla='eza -alh --color=always --icons=always --group-directories-first --hyperlink --time-style=iso --ignore-glob="ntuser.*|NTUSER.*"'
alias lt='eza -aTh --color=always --icons=always --group-directories-first --hyperlink --time-style=iso --ignore-glob="ntuser.*|NTUSER.*"'


###################
# functions
###################

dotfiles() {
    if [ -z "$1" ]; then
        cd "$DOTFILES"
    else
        "$DOTFILES"/dotfiles.sh "$@"
    fi
}
export -f dotfiles
 

###################
# FZF
###################

# options for all fzf windows
export FZF_DEFAULT_OPTS='--info inline-right --border-label "| NVIM btw |" --height=~75% --reverse --info inline-right --border=rounded --pointer="‚Üí" --margin 1'

# replacing default completion for path (i.e. ls cp rm) and dir (i.e. cd)
_fzf_compgen_path() {
  fd --hidden --ignore-case --follow "$1"
}
_fzf_compgen_dir() {
  fd --type d --hidden --ignore-case --follow "$1"
}

# # fzf will use this default command if and only if you don‚Äôt give any input.
# RG_GLOBS="--iglob '!.git/' --iglob '!professional/' --iglob '!*request-github/' --iglob '!ntuser*'"
# # read this for glob üëâüèΩ https://git-scm.com/docs/gitignore
# export FZF_DEFAULT_COMMAND="rg --hidden --follow  --files $RG_GLOBS"

# # Options to fzf command. im assuming these are for the find command
# # export FZF_COMPLETION_OPTS=''
# # Options for path completion (e.g. vim **<TAB>)
# export FZF_COMPLETION_PATH_OPTS='--walker file,dir,follow,hidden'
# # Options for directory completion (e.g. cd **<TAB>)
# export FZF_COMPLETION_DIR_OPTS='--walker dir,follow'
# # Advanced customization of fzf options via _fzf_comprun function
# # - The first argument to the function is the name of the command.
# # - You should make sure to pass the rest of the arguments ($@) to fzf.

# # changing default CTRL-* commands
# export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
# export FZF_ALT_C_COMMAND="find . type d"
# export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"


_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
    nvim|vim|nano|code) fzf --preview "bat -n --color=always {}"   "$@" ;;
    export|unset)       fzf --preview "eval 'echo \$'{}"           "$@" ;;
    *)                  fzf                                        "$@" ;;
  esac
}

# _fzf_compgen_path() {
#   echo "$1"
#   command find -L "$1" \
#     -name .git -prune -o -name .bash -prune -o -name .hg -prune -o -name .svn -prune -o \( -type d -o -type f -o -type l \) \
#     -a -not -path "$1" -print 2> /dev/null | command sed 's@^\./@@'
# }

# _fzf_compgen_dir() {
#   command find -L "$1" \
#     -name .git -prune -o -name .hg -prune -o -name .svn -prune -o -type d \
#     -a -not -path "$1" -print 2> /dev/null | command sed 's@^\./@@'
# }

# these work ‚òùüèΩ https://github.com/junegunn/fzf/issues/800

# git commit browser
# fshow() {
#   git log --graph --color=always \
#       --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
#   fzf --height ~75% --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
#       --bind "ctrl-m:execute:
#                 (grep -o '[a-f0-9]\{7\}' | head -1 |
#                 xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
#                 {}
# FZF-EOF"
# }

# more cool funcitons üëâüèΩ https://github.com/junegunn/fzf/wiki/examples

# # add to mac 
# function brew() {
#   if [[ $1 == "install" ]]; then
#     shift
#     command choco --version
#     echo hello world
#     # # Install the package
#     # command brew install "$@"
#     # # Update the global Brewfile
#     # command brew bundle dump --global --force
#   else
#     # Call the original brew command with all original arguments
#     command choco "$@"
#   fi
# }
# export -f brew